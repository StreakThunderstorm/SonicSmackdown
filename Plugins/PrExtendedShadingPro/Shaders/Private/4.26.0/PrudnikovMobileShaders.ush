// Copyright 2021 Prudnikov Nikolay. All Rights Reserved.

/*=============================================================================
	PrudnikovMobileShaders.ush: Prudnikov's mobile shaders
=============================================================================*/

#pragma once

#if PR_SHADER
#include "/Engine/Private/Common.ush"
#include "/Plugin/PrExtendedShadingPro/Private/PrudnikovBlend.ush"
#include "/Plugin/PrExtendedShadingPro/Private/PrudnikovCommon.ush"


void PrComputeIndirect(FVertexFactoryInterpolantsVSToPS Interpolants, float3 DiffuseDir, FMobileShadingModelContext ShadingModelContext, inout half IndirectIrradiance, inout half3 Color)
{
#if LQ_TEXTURE_LIGHTMAP
	float2 LightmapUV0, LightmapUV1;
	uint LightmapDataIndex;
	GetLightMapCoordinates(Interpolants, LightmapUV0, LightmapUV1, LightmapDataIndex);

	half4 LightmapColor = GetLightMapColorLQ(LightmapUV0, LightmapUV1, LightmapDataIndex, DiffuseDir);
	Color += LightmapColor.rgb * View.IndirectLightingColorScale;
	IndirectIrradiance = LightmapColor.a;
#elif CACHED_POINT_INDIRECT_LIGHTING
	#if MATERIALBLENDING_MASKED || MATERIALBLENDING_SOLID
		// Take the normal into account for opaque
		FThreeBandSHVectorRGB PointIndirectLighting;
		PointIndirectLighting.R.V0 = IndirectLightingCache.IndirectLightingSHCoefficients0[0];
		PointIndirectLighting.R.V1 = IndirectLightingCache.IndirectLightingSHCoefficients1[0];
		PointIndirectLighting.R.V2 = IndirectLightingCache.IndirectLightingSHCoefficients2[0];

		PointIndirectLighting.G.V0 = IndirectLightingCache.IndirectLightingSHCoefficients0[1];
		PointIndirectLighting.G.V1 = IndirectLightingCache.IndirectLightingSHCoefficients1[1];
		PointIndirectLighting.G.V2 = IndirectLightingCache.IndirectLightingSHCoefficients2[1];

		PointIndirectLighting.B.V0 = IndirectLightingCache.IndirectLightingSHCoefficients0[2];
		PointIndirectLighting.B.V1 = IndirectLightingCache.IndirectLightingSHCoefficients1[2];
		PointIndirectLighting.B.V2 = IndirectLightingCache.IndirectLightingSHCoefficients2[2];

		FThreeBandSHVector DiffuseTransferSH = CalcDiffuseTransferSH3(DiffuseDir, 1);

		half3 DiffuseGI = max(half3(0, 0, 0), DotSH3(PointIndirectLighting, DiffuseTransferSH));

		IndirectIrradiance = Luminance(DiffuseGI);
		Color += DiffuseGI * View.IndirectLightingColorScale;
	#else 
		half3 PointIndirectLighting = IndirectLightingCache.IndirectLightingSHSingleCoefficient.rgb;
		half3 DiffuseGI = PointIndirectLighting;

		IndirectIrradiance = Luminance(DiffuseGI);
		Color += DiffuseGI * View.IndirectLightingColorScale;
	#endif
#endif
}

#if MAX_DYNAMIC_POINT_LIGHTS > 0
void PrLightingOfDynamicPointLight(
FMaterialPixelParameters MaterialParameters, 
FMobileShadingModelContext ShadingModelContext,
FGBufferData GBuffer,
float4 LightPositionAndInvRadius, 
float4 LightColorAndFalloffExponent, 
float4 SpotLightDirectionAndSpecularScale, 
float4 SpotLightAnglesAndSoftTransitionScaleAndLightShadowType, 
#if SUPPORT_SPOTLIGHTS_SHADOW
FPCFSamplerSettings Settings,
float4 SpotLightShadowSharpenAndShadowFadeFraction,
float4 SpotLightShadowmapMinMax,
float4x4 SpotLightShadowWorldToShadowMatrix,
#endif
inout MaterialFloat3 Color, 
inout MaterialFloat3 SpecularColor)
{
	uint LightShadowType = SpotLightAnglesAndSoftTransitionScaleAndLightShadowType.w;

	half FadedShadow = 1.0f;

	#if SUPPORT_SPOTLIGHTS_SHADOW
		if ((LightShadowType & LightShadowType_Shadow) == LightShadowType_Shadow)
		{
			float4 HomogeneousShadowPosition = mul(float4(MaterialParameters.AbsoluteWorldPosition, 1), SpotLightShadowWorldToShadowMatrix);
			float2 ShadowUVs = HomogeneousShadowPosition.xy / HomogeneousShadowPosition.w;
			if (all(ShadowUVs >= SpotLightShadowmapMinMax.xy && ShadowUVs <= SpotLightShadowmapMinMax.zw))
			{
				float LightSpacePixelDepthForOpaque = min(HomogeneousShadowPosition.z, 0.99999f);
				Settings.SceneDepth = LightSpacePixelDepthForOpaque;
				Settings.TransitionScale = SpotLightAnglesAndSoftTransitionScaleAndLightShadowType.z;

				half Shadow = MobileShadowPCF(ShadowUVs, Settings);

				Shadow = saturate((Shadow - 0.5) * SpotLightShadowSharpenAndShadowFadeFraction.x + 0.5);

				FadedShadow = lerp(1.0f, Square(Shadow), SpotLightShadowSharpenAndShadowFadeFraction.y);

				#ifdef PR_SHADER_SHADOW_BLEND_FUNCTION
					PR_SHADER_SHADOW_BLEND_FUNCTION(FadedShadow)
				#endif // PR_SHADER_SHADOW_BLEND_FUNCTION
			}
		}
	#endif // SUPPORT_SPOTLIGHTS_SHADOW

	if ((LightShadowType & ValidLightType) != 0)
	{
		float3 ToLight = LightPositionAndInvRadius.xyz - MaterialParameters.AbsoluteWorldPosition;
		float DistanceSqr = dot(ToLight, ToLight);
		float3 L = ToLight * rsqrt(DistanceSqr);
		half3 PointH = normalize(MaterialParameters.CameraVector + L);

		half PointNoL = max(0, dot(MaterialParameters.WorldNormal, L));
		half PointNoH = max(0, dot(MaterialParameters.WorldNormal, PointH));

		float Attenuation;

		if (LightColorAndFalloffExponent.w == 0)
		{
			Attenuation = 1.0 / (DistanceSqr + 1.0);

			float LightRadiusMask = Square(saturate(1 - Square(DistanceSqr * (LightPositionAndInvRadius.w * LightPositionAndInvRadius.w))));
			Attenuation *= LightRadiusMask;
		}
		else
		{
			Attenuation = RadialAttenuation(ToLight * LightPositionAndInvRadius.w, LightColorAndFalloffExponent.w);
		}

		#if PROJECT_MOBILE_ENABLE_MOVABLE_SPOTLIGHTS
			if ((LightShadowType & LightShadowType_SpotLight) == LightShadowType_SpotLight)
			{
				Attenuation *= SpotAttenuation(L, -SpotLightDirectionAndSpecularScale.xyz, SpotLightAnglesAndSoftTransitionScaleAndLightShadowType.xy) * FadedShadow;
			}
		#endif // PROJECT_MOBILE_ENABLE_MOVABLE_SPOTLIGHTS

		MaterialFloat3 LightColor = Attenuation * LightColorAndFalloffExponent.rgb * (1.0 / PI) * PointNoL;
		Color += LightColor;

		#if !FULLY_ROUGH
			SpecularColor += min(65000.0, LightColor * ShadingModelContext.SpecularColor * CalcSpecular(GBuffer.Roughness, PointNoH)) * SpotLightDirectionAndSpecularScale.w;
		#endif // !FULLY_ROUGH
	}
}

void PrPointLight(inout MaterialFloat3 Color, inout MaterialFloat3 SpecularColor, FMaterialPixelParameters MaterialParameters, FMobileShadingModelContext ShadingModelContext, FGBufferData GBuffer)
{
	#if SUPPORT_SPOTLIGHTS_SHADOW
		FPCFSamplerSettings Settings;
		Settings.ShadowDepthTexture = DynamicSpotLightShadowTexture;
		Settings.ShadowDepthTextureSampler = DynamicSpotLightShadowSampler;
		Settings.ShadowBufferSize = DynamicSpotLightShadowBufferSize;
		Settings.bSubsurface = false;
		Settings.bTreatMaxDepthUnshadowed = false;
		Settings.DensityMulConstant = 0;
		Settings.ProjectionDepthBiasParameters = 0;
	#endif

	PrLightingOfDynamicPointLight(	MaterialParameters, ShadingModelContext, GBuffer,
									MobileMovablePointLight0.LightPositionAndInvRadius, MobileMovablePointLight0.LightColorAndFalloffExponent, MobileMovablePointLight0.SpotLightDirectionAndSpecularScale, MobileMovablePointLight0.SpotLightAnglesAndSoftTransitionScaleAndLightShadowType, 
									#if SUPPORT_SPOTLIGHTS_SHADOW
									Settings, MobileMovablePointLight0.SpotLightShadowSharpenAndShadowFadeFraction, MobileMovablePointLight0.SpotLightShadowmapMinMax, MobileMovablePointLight0.SpotLightShadowWorldToShadowMatrix,
									#endif
									Color, SpecularColor);

		if (NumDynamicPointLights > 1)
		{
			PrLightingOfDynamicPointLight(	MaterialParameters, ShadingModelContext, GBuffer,
											MobileMovablePointLight1.LightPositionAndInvRadius, MobileMovablePointLight1.LightColorAndFalloffExponent, MobileMovablePointLight1.SpotLightDirectionAndSpecularScale, MobileMovablePointLight1.SpotLightAnglesAndSoftTransitionScaleAndLightShadowType, 
											#if SUPPORT_SPOTLIGHTS_SHADOW
											Settings, MobileMovablePointLight1.SpotLightShadowSharpenAndShadowFadeFraction, MobileMovablePointLight1.SpotLightShadowmapMinMax, MobileMovablePointLight1.SpotLightShadowWorldToShadowMatrix,
											#endif
											Color, SpecularColor);

			if (NumDynamicPointLights > 2)
			{
				PrLightingOfDynamicPointLight(	MaterialParameters, ShadingModelContext, GBuffer,
												MobileMovablePointLight2.LightPositionAndInvRadius, MobileMovablePointLight2.LightColorAndFalloffExponent, MobileMovablePointLight2.SpotLightDirectionAndSpecularScale, MobileMovablePointLight2.SpotLightAnglesAndSoftTransitionScaleAndLightShadowType, 
												#if SUPPORT_SPOTLIGHTS_SHADOW
												Settings, MobileMovablePointLight2.SpotLightShadowSharpenAndShadowFadeFraction, MobileMovablePointLight2.SpotLightShadowmapMinMax, MobileMovablePointLight2.SpotLightShadowWorldToShadowMatrix,
												#endif
												Color, SpecularColor);

				if (NumDynamicPointLights > 3)
				{
					PrLightingOfDynamicPointLight(	MaterialParameters, ShadingModelContext, GBuffer,
													MobileMovablePointLight3.LightPositionAndInvRadius, MobileMovablePointLight3.LightColorAndFalloffExponent, MobileMovablePointLight3.SpotLightDirectionAndSpecularScale, MobileMovablePointLight3.SpotLightAnglesAndSoftTransitionScaleAndLightShadowType, 
													#if SUPPORT_SPOTLIGHTS_SHADOW
													Settings, MobileMovablePointLight3.SpotLightShadowSharpenAndShadowFadeFraction, MobileMovablePointLight3.SpotLightShadowmapMinMax, MobileMovablePointLight3.SpotLightShadowWorldToShadowMatrix,
													#endif
													Color, SpecularColor);
				}
			}
		}
}
#endif // MAX_DYNAMIC_POINT_LIGHTS > 0


void PrShading(inout MaterialFloat3 Color, inout half IndirectIrradiance, FMaterialPixelParameters MaterialParameters, FMobileShadingModelContext ShadingModelContext, FVertexFactoryInterpolantsVSToPS Interpolants, FGBufferData GBuffer)
{
	Color = 0.0;
	IndirectIrradiance = 0.0;

	FPrShadingValues Values = PrShadingValues_Make();

	
	#if PR_SHADER_LM_INDIRECT
		half3 IndirectColor = 0;
		PrComputeIndirect(Interpolants, MaterialParameters.WorldNormal, ShadingModelContext, IndirectIrradiance, IndirectColor);
		Values.IndirectLayer.Color = IndirectColor * GBuffer.GBufferAO;
		Values.IndirectLayer.LayerModifier = ShadingModelContext.DiffuseColor;
		Values.IndirectLayer.bEnabled = true;
	#endif // PR_SHADER_LM_INDIRECT
	

	#if ENABLE_SKY_LIGHT
	#if PR_SHADER_SL_INDIRECT
		Values.SkylightLayer.Color = GetSkySHDiffuseSimple(MaterialParameters.WorldNormal) * ResolvedView.SkyLightColor.rgb * GBuffer.GBufferAO;
		Values.SkylightLayer.LayerModifier = ShadingModelContext.DiffuseColor;
		Values.SkylightLayer.bEnabled = true;
		IndirectIrradiance += Luminance(Values.SkylightLayer.Color);
	#endif // PR_SHADER_SL_INDIRECT
	#endif // ENABLE_SKY_LIGHT

	IndirectIrradiance *= GBuffer.GBufferAO;

	Values.DiffuseLayer.Color = GBuffer.BaseColor;
	Values.DiffuseLayer.bEnabled = true;

	Values.DirectionalLightLayer.Color = MobileDirectionalLight.DirectionalLightColor.rgb;
	Values.DirectionalLightLayer.LayerModifier = ShadingModelContext.DiffuseColor;
	Values.DirectionalLightLayer.bEnabled = true;

	Values.ShadowLayer.Color = GetPrimaryPrecomputedShadowMask(Interpolants).r * GBuffer.GBufferAO;
	Values.ShadowLayer.bEnabled = true;

	#if DIRECTIONAL_LIGHT_CSM
		if (MobileBasePass.UseCSM)
		{
			half ShadowMap = MobileDirectionalLightCSM(MaterialParameters.ScreenPosition.xy, MaterialParameters.ScreenPosition.w);
			#if MOVABLE_DIRECTIONAL_LIGHT
				Values.ShadowLayer.Color = ShadowMap;
			#else // MOVABLE_DIRECTIONAL_LIGHT
				Values.ShadowLayer.Color = min(ShadowMap, Values.ShadowLayer.Color);
			#endif // !MOVABLE_DIRECTIONAL_LIGHT
		}
	#endif // DIRECTIONAL_LIGHT_CSM

	Values.SelfShadowLayer.Color = max(0, dot(MaterialParameters.WorldNormal, MobileDirectionalLight.DirectionalLightDirectionAndShadowTransition.xyz));
	Values.SelfShadowLayer.bEnabled = true;

	#if !FULLY_ROUGH
		half3 H = normalize(MaterialParameters.CameraVector + MobileDirectionalLight.DirectionalLightDirectionAndShadowTransition.xyz);
		half NoH = max(0, dot(MaterialParameters.WorldNormal, H));

		Values.SpecularLayer.Color = MobileDirectionalLight.DirectionalLightColor.rgb * ShadingModelContext.SpecularColor * CalcSpecular(GBuffer.Roughness, NoH) * MobileDirectionalLight.DirectionalLightDistanceFadeMADAndSpecularScale.z;
		Values.SpecularLayer.bEnabled = true;
	#endif // !FULLY_ROUGH

	#if !FULLY_ROUGH
		half3 SpecularIBL = GetImageBasedReflectionLighting(MaterialParameters, GBuffer.Roughness, IndirectIrradiance, 1.0f);
		#if MATERIAL_PLANAR_FORWARD_REFLECTIONS
			BRANCH
			if (abs(dot(PlanarReflectionStruct.ReflectionPlane.xyz, 1)) > .0001f)
			{
				half4 PlanarReflection = GetPlanarReflection(MaterialParameters.AbsoluteWorldPosition, MaterialParameters.WorldNormal, GBuffer.Roughness);
				SpecularIBL = lerp(SpecularIBL, PlanarReflection.rgb, PlanarReflection.a);
			}
		#endif // MATERIAL_PLANAR_FORWARD_REFLECTIONS
		Values.ReflectionLayer.Color = SpecularIBL * ShadingModelContext.SpecularColor;
		Values.ReflectionLayer.bEnabled = true;
	#endif // !FULLY_ROUGH

	
	#if MAX_DYNAMIC_POINT_LIGHTS > 0
		PrPointLight(Values.DynamicLightLayer.Color, Values.DynamicLightSpecularLayer.Color, MaterialParameters, ShadingModelContext, GBuffer);
		Values.DynamicLightLayer.LayerModifier = ShadingModelContext.DiffuseColor;
		Values.DynamicLightLayer.bEnabled = true;
		
		#if !FULLY_ROUGH
			Values.DynamicLightSpecularLayer.bEnabled = true;
		#endif // !FULLY_ROUGH
	#endif // MAX_DYNAMIC_POINT_LIGHTS > 0
	

	PrBlend(Color, Values);
}

#endif // PR_SHADER